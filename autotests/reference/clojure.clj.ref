<Comment>; Test file, released under MIT License</Comment><br/>
<Brackets>(</Brackets><Keyword>ns</Keyword><Normal> </Normal><BracketsMeta>^{</BracketsMeta><Modifier2>:doc</Modifier2><Normal> </Normal><Documentation>"Syntax highlighting test file"</Documentation><br/>
<Normal>      </Normal><Modifier2>:author</Modifier2><Normal> </Normal><Documentation>"Markus Brenneis"</Documentation><BracketsMeta>}</BracketsMeta><br/>
<Normal>    highlighting</Normal><Brackets>)</Brackets><br/>
<Normal></Normal><br/>
<Brackets>(</Brackets><Definition>defn</Definition><Function> something-else </Function><BracketsSquare>[</BracketsSquare><Normal>f xs</Normal><BracketsSquare>]</BracketsSquare><br/>
<Normal>  </Normal><Comment>#_</Comment><Brackets>(</Brackets><Keyword>map</Keyword><Normal> #</Normal><Brackets>(</Brackets><Keyword>apply</Keyword><Normal> f </Normal><Brackets>(</Brackets><Variable>%</Variable><Normal> </Normal><BracketsSquare>[</BracketsSquare><Variable>%</Variable><BracketsSquare>]</BracketsSquare><Brackets>))</Brackets><Normal> </Normal><Brackets>(</Brackets><Keyword>cons</Keyword><Normal> </Normal><Decimal>1</Decimal><Normal> xs</Normal><Brackets>))</Brackets><br/>
<Normal>  </Normal><Brackets>(</Brackets><Keyword>map</Keyword><Normal> #</Normal><Brackets>(</Brackets><Keyword>apply</Keyword><Normal> f </Normal><Brackets>(</Brackets><Variable>%</Variable><Normal> xs</Normal><Brackets>))</Brackets><Normal> </Normal><Brackets>(</Brackets><Keyword>cons</Keyword><Normal> </Normal><Decimal>1</Decimal><Normal> xs</Normal><Brackets>))</Brackets><br/>
<Normal>  </Normal><Comment>#_</Comment><BracketsSquare>[</BracketsSquare><Decimal>1</Decimal><Normal> '</Normal><Brackets>(</Brackets><Decimal>2</Decimal><Brackets>)</Brackets><BracketsSquare>]</BracketsSquare><br/>
<Normal>  xs</Normal><Brackets>)</Brackets><br/>
<Normal></Normal><br/>
<Brackets>(</Brackets><Definition>def</Definition><Function> foo </Function><BracketsSquare>[</BracketsSquare><Char>\a</Char><Normal> </Normal><Char>\b</Char><Normal> </Normal><Char>\n</Char><Normal> </Normal><Char>\ucafe</Char><Normal> </Normal><Char>\o123</Char><Normal> </Normal><Char>\n</Char><br/>
<Normal>          </Normal><Char>\newline</Char><Normal> </Normal><Char>\tab</Char><Normal> </Normal><Char>\space</Char><Normal> </Normal><Char>\formfeed</Char><Normal> </Normal><Char>\backspace</Char><BracketsSquare>]</BracketsSquare><Brackets>)</Brackets><br/>
<Normal></Normal><br/>
<Brackets>(</Brackets><Definition>def</Definition><Function> fizz </Function><BracketsMap>{</BracketsMap><BracketsSet>#{</BracketsSet><Char>\a</Char><Normal> </Normal><Char>\b</Char><BracketsSet>}</BracketsSet><br/>
<Normal>           </Normal><BracketsSet>#{</BracketsSet><Char>\n</Char><Normal> </Normal><Char>\newline</Char><BracketsSet>}</BracketsSet><BracketsMap>}</BracketsMap><Brackets>)</Brackets><br/>
<Normal></Normal><br/>
<Brackets>(</Brackets><Definition>def</Definition><Function> fizz' </Function><BracketsSet>#{</BracketsSet><BracketsMap>{</BracketsMap><Char>\a</Char><Normal> </Normal><Char>\b</Char><BracketsMap>}</BracketsMap><br/>
<Normal>             </Normal><BracketsMap>{</BracketsMap><Char>\n</Char><Normal> </Normal><Char>\newline</Char><BracketsMap>}</BracketsMap><BracketsSet>}</BracketsSet><Brackets>)</Brackets><br/>
<Normal></Normal><br/>
<Brackets>(</Brackets><Definition>defn</Definition><Function> bar </Function><BracketsSquare>[</BracketsSquare><Normal>xs</Normal><BracketsSquare>]</BracketsSquare><br/>
<Normal>  </Normal><Brackets>(</Brackets><Keyword>as-></Keyword><Normal> xs <></Normal><br/>
<Normal>        </Normal><Brackets>(</Brackets><Keyword>cons</Keyword><Normal> </Normal><Modifier2>:a</Modifier2><Normal> <></Normal><Brackets>)</Brackets><br/>
<Normal>        </Normal><Brackets>(</Brackets><Keyword>map</Keyword><Normal> #</Normal><Brackets>(</Brackets><Variable>%1</Variable><Normal> </Normal><Variable>%2</Variable><Brackets>)</Brackets><Normal> <></Normal><Brackets>)</Brackets><Normal> </Normal><Comment>; </Comment><Alert Level 2>TODO</Alert Level 2><Comment> improve</Comment><br/>
<Normal>        </Normal><Brackets>(</Brackets><Keyword>into</Keyword><Normal> <> </Normal><BracketsSquare>[</BracketsSquare><Modifier2>:konjure.logic.specs/numShips</Modifier2><BracketsSquare>]</BracketsSquare><Brackets>)))</Brackets><br/>
<Normal></Normal><br/>
<Brackets>(</Brackets><Definition>def</Definition><Function> x-2-y</Function><br/>
<Normal>  </Normal><Comment>#_</Comment><String>"do </String><String Char>\"</String Char><String> sth"</String><br/>
<Normal>  </Normal><Brackets>(</Brackets><Normal>domonad set-m</Normal><br/>
<Normal>    </Normal><BracketsSquare>[</BracketsSquare><Normal>x </Normal><BracketsSet>#{</BracketsSet><Float>1.1</Float><Normal>, </Normal><Brackets>(</Brackets><Keyword>+</Keyword><Normal> -2 +4</Normal><Brackets>)</Brackets><BracketsSet>}</BracketsSet><br/>
<Normal>     y </Normal><BracketsSet>#{</BracketsSet><Float>1.1</Float><Normal>, </Normal><Brackets>(</Brackets><Keyword>-</Keyword><Normal> -2.</Normal><Decimal>0</Decimal><Normal> </Normal><Float>4.0</Float><Brackets>)</Brackets><BracketsSet>}</BracketsSet><BracketsSquare>]</BracketsSquare><br/>
<Normal>    </Normal><Brackets>(</Brackets><Keyword>*'</Keyword><Normal> x y</Normal><Brackets>)))</Brackets><br/>
<Normal></Normal><br/>
<Brackets>(</Brackets><Definition>def</Definition><Function> bases</Function><br/>
<Normal>  </Normal><Brackets>(</Brackets><Keyword>and</Keyword><Normal> </Normal><Brackets>(</Brackets><Keyword>=</Keyword><Normal> -1 -1N</Normal><Brackets>)</Brackets><br/>
<Normal>       </Normal><Brackets>(</Brackets><Keyword>=</Keyword><Normal> </Normal><Float>1/4</Float><Normal> -2.</Normal><Decimal>5</Decimal><Normal>e-1</Normal><Brackets>)</Brackets><br/>
<Normal>       </Normal><Brackets>(</Brackets><Keyword>=</Keyword><Normal> -</Normal><Float>1/2</Float><Normal> -0.</Normal><Decimal>5</Decimal><Normal>M</Normal><Brackets>)</Brackets><br/>
<Normal>       </Normal><Brackets>(</Brackets><Keyword>=</Keyword><Normal> -</Normal><BaseN>0x1Ab</BaseN><Normal> -</Normal><BaseN>0X1ab</BaseN><Brackets>)</Brackets><br/>
<Normal>       </Normal><Brackets>(</Brackets><Keyword>=</Keyword><Normal> +</Normal><BaseN>2r101010</BaseN><Normal> </Normal><BaseN>25R1h</BaseN><Brackets>)</Brackets><br/>
<Normal>       </Normal><Brackets>(</Brackets><Keyword>=</Keyword><Normal> </Normal><Error>39r13</Error><Normal> </Normal><Error>42R10</Error><Brackets>)))</Brackets><Normal> </Normal><Comment>; </Comment><Alert Level 2>FIXME</Alert Level 2><Comment> this one is not correct</Comment><br/>
<Normal></Normal><br/>
<Brackets>(</Brackets><Definition>def</Definition><Function> </Function><BracketsMeta>^{</BracketsMeta><Modifier2>:private</Modifier2><Normal> </Normal><Variable>true</Variable><BracketsMeta>}</BracketsMeta><br/>
<Normal>  </Normal><Brackets>(</Brackets><Keyword>=</Keyword><Normal> </Normal><Brackets>(</Brackets><Keyword>last</Keyword><Normal> </Normal><BracketsSet>#{#{}}</BracketsSet><Brackets>)</Brackets><Normal> </Normal><BracketsSet>#{</BracketsSet><BracketsMap>{</BracketsMap><BracketsSet>#{}</BracketsSet><BracketsMap>}</BracketsMap><BracketsSet>}</BracketsSet><Brackets>))</Brackets><br/>
<Normal></Normal><br/>
<Brackets>(</Brackets><Definition>def</Definition><Function> s </Function><String>"#repl</String><String Char>\n</String Char><String>"</String><Brackets>)</Brackets><br/>
<Brackets>(</Brackets><Definition>def</Definition><Function> r </Function><Regexpr>#"repl"</Regexpr><Brackets>)</Brackets><br/>
<Normal></Normal><br/>
<Brackets>(</Brackets><Definition>defn-</Definition><Function> stuff!</Function><br/>
<Normal>  </Normal><BracketsSquare>[</BracketsSquare><Normal>a</Normal><BracketsSquare>]</BracketsSquare><br/>
<Normal>  </Normal><String>"This is no </String><String Char>\"</String Char><String>documentation</String><String Char>\"</String Char><String>!"</String><br/>
<Normal>  </Normal><Brackets>(</Brackets><Keyword>=</Keyword><Normal> </Normal><Brackets>(</Brackets><Keyword>class</Keyword><Normal> </Normal><Variable>#'+</Variable><Brackets>)</Brackets><Normal> </Normal><Brackets>(</Brackets><Keyword>class</Keyword><Normal> </Normal><Variable>#'foo</Variable><Brackets>))</Brackets><br/>
<Normal>  </Normal><Brackets>(</Brackets><Keyword>let</Keyword><Normal> </Normal><BracketsSquare>[</BracketsSquare><Keyword>+</Keyword><Normal> </Normal><Keyword>-</Keyword><BracketsSquare>]</BracketsSquare><Normal> </Normal><BracketsSquare>[</BracketsSquare><Brackets>(</Brackets><Keyword>+</Keyword><Normal> a </Normal><Decimal>1</Decimal><Brackets>)</Brackets><Normal> </Normal><Brackets>(</Brackets><Modifier>@#'+</Modifier><Normal> a </Normal><Decimal>1</Decimal><Brackets>)</Brackets><BracketsSquare>]</BracketsSquare><Brackets>))</Brackets><br/>
<Normal></Normal><br/>
<Brackets>(</Brackets><Definition>defn-</Definition><Function> throwIllegalArgumentException!</Function><br/>
<Normal>  </Normal><String>"Throws an </String><String Char>\"</String Char><String>IllegalArgumentException</String><String Char>\"</String Char><String> or</String><br/>
<String>  a js/Error."</String><br/>
<Normal>  </Normal><BracketsSquare>[</BracketsSquare><Normal>message</Normal><BracketsSquare>]</BracketsSquare><br/>
<Normal>  </Normal><Readermacro>#?</Readermacro><Brackets>(</Brackets><Modifier2>:clj</Modifier2><Normal>  </Normal><Brackets>(</Brackets><Keyword>throw</Keyword><Normal> </Normal><Brackets>(</Brackets><Normal>IllegalArgumentException. message</Normal><Brackets>))</Brackets><br/>
<Normal>     </Normal><Modifier2>:cljs</Modifier2><Normal> </Normal><Brackets>(</Brackets><Keyword>throw</Keyword><Normal> </Normal><Brackets>(</Brackets><Normal>js/Error. message</Normal><Brackets>))))</Brackets><br/>
<Normal></Normal><br/>
<Brackets>(</Brackets><Definition>defmacro</Definition><Function> let-fn </Function><Documentation>"a nonsense macro"</Documentation><Normal> </Normal><BracketsSquare>[</BracketsSquare><Normal>one-binding & body</Normal><BracketsSquare>]</BracketsSquare><br/>
<Normal>  `</Normal><Brackets>(</Brackets><Keyword>+</Keyword><Normal> </Normal><Decimal>1</Decimal><Normal> ~</Normal><Brackets>(</Brackets><Keyword>inc'</Keyword><Normal> </Normal><Decimal>1</Decimal><Brackets>))</Brackets><br/>
<Normal>  </Normal><Brackets>(</Brackets><Keyword>let</Keyword><Normal> </Normal><BracketsSquare>[[</BracketsSquare><Normal>identifier & fn-body</Normal><BracketsSquare>]</BracketsSquare><Normal> one-binding</Normal><BracketsSquare>]</BracketsSquare><br/>
<Normal>    `</Normal><Brackets>(</Brackets><Keyword>let</Keyword><Normal> </Normal><BracketsSquare>[</BracketsSquare><Modifier>~identifier</Modifier><Normal> </Normal><Brackets>(</Brackets><Keyword>fn</Keyword><Normal> </Normal><Modifier>~identifier</Modifier><Normal> </Normal><Modifier>~@fn-body</Modifier><Brackets>)</Brackets><BracketsSquare>]</BracketsSquare><br/>
<Normal>      </Normal><Modifier>~@body</Modifier><Normal> </Normal><Modifier>`a#</Modifier><Brackets>)))</Brackets><br/>
<Normal></Normal><br/>
<Brackets>(</Brackets><Definition>def</Definition><Function> state </Function><Brackets>(</Brackets><Keyword>atom</Keyword><Normal> </Normal><BracketsSquare>[</BracketsSquare><Brackets>(</Brackets><Keyword>=</Keyword><Normal> </Normal><Variable>false</Variable><Normal> </Normal><Variable>true</Variable><Brackets>)</Brackets><Normal> </Normal><Variable>nil</Variable><BracketsSquare>]</BracketsSquare><Brackets>))</Brackets><br/>
<Normal></Normal><br/>
<Brackets>(</Brackets><Definition>defn</Definition><Function> something-cool </Function><BracketsSquare>[]</BracketsSquare><Normal> </Normal><Brackets>(</Brackets><Keyword>first</Keyword><Normal> </Normal><Modifier>@state</Modifier><Brackets>))</Brackets><br/>
<Normal></Normal><br/>
<Brackets>(</Brackets><Definition>defn-</Definition><Function> something-different </Function><BracketsSquare>[]</BracketsSquare><Normal> </Normal><Brackets>(</Brackets><Keyword>first</Keyword><Normal> </Normal><Brackets>(</Brackets><Keyword>into</Keyword><Normal> </Normal><Modifier>@state</Modifier><Normal> </Normal><BracketsSquare>[</BracketsSquare><Decimal>12</Decimal><BracketsSquare>]</BracketsSquare><Brackets>)))</Brackets><br/>
<Normal></Normal><br/>
<Brackets>(</Brackets><Definition>defn-</Definition><Function> instance-getfield </Function><BracketsSquare>[</BracketsSquare><Normal>this k</Normal><BracketsSquare>]</BracketsSquare><Normal> </Normal><Brackets>(</Brackets><Normal>@</Normal><Brackets>(</Brackets><Normal>.state this</Normal><Brackets>)</Brackets><Normal> k</Normal><Brackets>))</Brackets><br/>
